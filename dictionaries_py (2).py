# -*- coding: utf-8 -*-
"""dictionaries.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1d-XD3vcdhgNzJIgfgL4FMtHn86eCzDuw
"""

#Q1
product= int(input('Enter number of products : '))#nunber of products to br looped
prod = {}#empty dictionary created
for i in range(product):#num of products are being looped
  p = input('Enter product name : ')#name of product
  prod[p] = int(input('Enter its price : '))#storing the key value prod in the dictionary

exit = True#declaring exit as true
while exit:#using while loop where the exit is true
  p = input('Enter the product name to know its prize or enter exit to finish : ')
  if p == 'exit':
    break#if exit entered the loop is terminated
  if p in prod:#if the product entered in in the dictionary..
    print('price of', p, 'is', prod[p])
  else:
    print(p, 'is not here')

#Q2
print(prod)
amount =eval(input("Enter Amount: $$"))#asking the user to enter amount to be compared
for key ,values in prod.items():
    if  int(values) < amount:#comparing the values here
        print (key ,"---",values)

#Q3
#created a dictionary
days = {'January':31,'February':28,'March':31,'April':30,'May':31,'June':30,'July':31,'August':31,'September':30,'October':31,'November':30,'December':31}

#a
month=input("Enter a month: ")#aasking the user to enter the month
print("Number of days in",month,"is",days.get(month.strip()))#strip removes the char
#b
print(sorted(days))#sorting in alphabetical order
#c
for i in days:#loop
  if days[i]==31:
    print(i,end=" ")
#d

#Q4
#created a sample dictionary
sample_dic = {'Humna' : "9111",'Riffah' : "7095",'Zuha' : "4200",'Maryam' : "6549",'Hareem' : "2569",'Faisal' : "6969",'Ahmed' : "4720",'Horria' : "2547",'Quosain' : "1798",'Misbah' : "3549" }
#asking the user to enter the username
username = input("Enter username :- ")

if username in sample_dic :#if the username is in the dictionary created
    password = input("Enter password :- ")#asking the user to enter the password
    if sample_dic[username] == password :#if the key is in the dictionary and is equal to the value
        print ("Access Granted")
    else :
        print ("Invalid password.")
else :
    print ("You are not valid user.")

#Q5
teams= int(input('Enter number of teams : '))#asking the users to enter the number of teams to be evaluated
scores = {}#creating a dictionary
for i in range(teams):#loop
  name = input('Enter team name : ')#askung users to enter the team name
  win = int(input('Enter wins : '))#number of wins
  loss = int(input('Enter losses : '))#nuber of losses
  scores[name] = [win, loss]#creates a dictionary with key as team names and value as win and loss
#print(scores)#this is done for my understanding not part of the question
# (a)
t = input('Enter team name : ')#enter team name to be evaluated
print('winning percentage of', t, 'is', (scores[t][0]/sum(scores[t]))*100)#score t at index 0 which is the wins divided by total score multiply by 100 to get percentage


# (b)
w_team = [i[0] for i in scores.values()]#printing out the win in values which is at the first index which is 0
print(w_team)

# (c)
win_record = []#creating a list 
for i in scores:#loop
  if scores[i][0] > 0:#win at index 0
    win_record.append(i)
  print(win_record)

#Q7
matrix_5= [1,2,3,4,5,     #matrix created bt list
           5,6,7,4,5,
           6,7,8,0,3,
           4,2,1,5,6,
           7,8,9,0,5]

def creatList():#function
    matrix_dic={}#dictionary created
    for num in range(len(matrix_5)):
        key = matrix_5[num]
        value = matrix_5.count(key)
        matrix_dic.update({key:value})
    return matrix_dic



print(creatList())

#Q8
import random
import operator
deck = [{ ' value ' :i, ' suit ' :c}
for c in [ ' spades ' , ' clubs ' , ' hearts ' , ' diamonds ' ]
for i in range(2,15)]
deck1 = {}#dictionary created
deck2 = {}
arr1 = [None]*3#array created
arr2 = [None]*3

random.shuffle(deck)#random shuffling
#for player one
print("Player One:")
for i in range(0,3):
    deck1 = deck[i]#creating a dictionary with key as value:i(loop)and key suit:c from the declared list above
    print(deck[i])
    x = max(deck1)#max value of deck1
    arr1[i] = deck1[x]#storing the value i in the array this will dislay the numbers only
print(arr1)   


print("\nPlayer Two:")
#for player two

random.shuffle(deck)#random shuffling
for i in range(0,3):
    deck2 = deck[i]#creating a dictionary with key as value:i(loop)and key suit:c from the declared list above
    print(deck[i])
    y = max(deck2)#max value of deck2
    arr2[i] = deck2[y]#storing the value i in the array this will dislay the numbers only
    
print(arr2)

firstMax = max(arr1)
seccondMax = max(arr2)
print("\nHighest Value of Player One ",firstMax)
print("\nHigest Value of Player Two: ",seccondMax)
if(firstMax==seccondMax):
    print("\nGame Tie\n")
elif(firstMax>seccondMax):
    print("\nPlayer One won\n")
elif(seccondMax>firstMax):
    print("\nPlayer Two Won\n")

#Q9
deck = [{ 'value': i, 'suit': c}
for c in [ 'spades' , 'clubs', 'hearts', 'diamonds']
for i in range(2,15)]

random.shuffle(deck)   # to shuffle the cards
p_1=[0]*3              # value '2' of clubs
p_2=['s']*3            # suit 2 of "clubs"

check=0
print('Cards: ')
while check<3:
    print(deck[check]['suit'],':',deck[check]['value'])
    p_1[check]=int(deck[check]['value'])
    p_2[check]=deck[check]['suit']
    check=check+1


p_1=sorted(p_1, reverse=True)  # 10, 9, 7
    
if p_1[0]==p_1[1]==p_1[2]:
    print('Three of A Kind')
elif p_2[0]==p_2[1]==p_2[2]:
    if p_1[0]==p_1[1]+1 and p_1[0]==p_1[2]+2:
        print('Straight Flush')
    else:
        print('Flush')
elif p_1[0]==p_1[1] or p_1[0]==p_1[2] or p_1[2]==p_1[1]:
    print('Pair')
elif p_1[0]==p_1[1]+1 and p_1[0]==p_1[2]+2:
        print('Straight')
else:
    print('High Card :',p_1[0])

#Q12
#list created
my_note=['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']

print('Cord types are : Minor, Augmented fifth, Minor fifth, Major sixth, Minor sixth\n \t\tDominant seventh, Minor seventh, Major seventh, Diminished seventh')
key=input('Enter Key: ')
cord_type=input('Enter Cord Type: ')

i=0
while i<12:#would run when i is less than 12
    if my_note[i]==key:
        break
    i=i+1
#solving this according to the table given in the question
if cord_type=='Minor':
    print(my_note[i],my_note[i+3],my_note[(i+7)%11])
elif cord_type=='Augmented fifth':
    print(my_note[i],my_note[i+4],my_note[(i+8)%11])
elif cord_type=='Minor fifth':
    print(my_note[i],my_note[i+4],my_note[(i+6)%11])
elif cord_type=='Major sixth':
    print(my_note[i],my_note[i+4],my_note[(i+7)%11], my_note[(i+9)%11])
elif cord_type=='Dominant seventh':
    print(my_note[i],my_note[i+4],my_note[(i+7)%11], my_note[(i+10)%11])
elif cord_type=='Minor seventh':
    print(my_note[i],my_note[i+3],my_note[(i+7)%11], my_note[(i+10)%11])
elif cord_type=='Major seventh':
    print(my_note[i],my_note[i+4],my_note[(i+7)%11],my_note[(i+11)%11])
elif cord_type=='Diminished seventh':
    print(my_note[i],my_note[i+3],my_note[(i+6)%11], my_note[(i+10)%11])
elif cord_type=='Minor sixth':
    print(my_note[i],my_note[i+3],my_note[(i+7)%11], my_note[(i+9)%11])

#Q13
#list created
L = [ 'aabaabac' , 'cabaabca' , 'aaabbcba' , 'aabacbab' , 'acababba' ] 
#asking user to enter a string
s=input("Enter string with one * :")

i=0
check=0
while i<5:
    check=0
    m=0
    if s[m]==L[i][m]:
        check=1
        m=m+1
        while m<len(s)-1 and check==1:
            if s[m]!=L[i][m]:
                check=0
        m=m+1
    if check==1:
        print(L[i])
    i=i+1

if check==0:
    print('No Match')

#Q14
d=[{ ' name ' : ' Todd ' , ' phone ' : ' 555-1414 ' , ' email ' : ' todd@mail.net ' }, 
   { ' name ' : ' Helga ' , ' phone ' : ' 555-1618 ' , ' email ' : ' helga@mail.net ' }, 
   { ' name ' : ' Princess ' , ' phone ' : ' 555-3141 ' , ' email ' : '' }, 
   { ' name ' : ' LJ ' , ' phone ' : ' 555-2718 ' , ' email ' : ' lj@mail.net ' }]
#print(d[2][' email '])
#a=''
#print(len(a))

print('All the users whose phone number ends in an 8')
i=0
for a in d:
    n=d[i][' phone '] #key phone
    if n[-2]=='8':#last digit equal to 8
        print(d[i])
    i=i+1#increment

print('\nAll the users that donâ€™t have an email address listed')
i=0
for a in d:
    n=d[i][' email ']#key email
    if len(n)==0:#if no email present then the value of len is 0
        print(d[i])
    i=i+1#increment

#Q16
def int_to_roman(input):
    """ Convert an integer to a Roman numeral. """

    if not isinstance(input, type(1)):
        raise (TypeError,"expected integer, got %s" % type(input))
    if not 0 < input < 4000:
        raise (ValueError, "Argument must be between 1 and 3999")
    ints = (1000, 900,  500, 400, 100,  90, 50,  40, 10,  9,   5,  4,   1)
    nums = ('M',  'CM', 'D', 'CD','C', 'XC','L','XL','X','IX','V','IV','I')
    result = []
    for i in range(len(ints)):
        count = int(input / ints[i])
        result.append(nums[i] * count)
        input -= ints[i] * count
        #print(result,"result")
        #print(input,"Input")
    return ''.join(result)


print(int_to_roman(22))